//Adapter -  позволяет объектам с несовместимыми интерфейсами работать вместе. Обеспечивает совместимость классов с разными интерфейсами, т.е. выполняет роль переводчика. Способ работы адаптера заключается в том, что вы создаете функцию (которая может быть классом, но не должна быть реализована как класс), которая адаптирует свойства и методы своего интерфейса в новый класс, как если бы адаптер все еще мог идентифицироваться и вести себя как оригинал, в то же время имея возможность работать с новым интерфейсом.


// old interface
class OldCalculator {
  constructor() {
    this.operations = function (term1, term2, operation) {
      switch (operation) {
        case 'add':
          return term1 + term2
        case 'sub':
          return term1 - term2
        default:
          return NaN
      }
    }
  }
}

// new interface
class NewCalculator {
  constructor() {
    this.add = function (term1, term2) {
      return term1 + term2
    }
    this.sub = function (term1, term2) {
      return term1 - term2
    }
  }
}
// Adapter Class
class CalcAdapter {
  constructor() {
    const newCalc = new NewCalculator()

    this.operations = function (term1, term2, operation) {
      switch (operation) {
        case 'add':
          // новая реализация
          return newCalc.add(term1, term2)
        case 'sub':
          return newCalc.sub(term1, term2)
        default:
          return NaN
      }
    }
  }
}

// 
const oldCalc = new OldCalculator()
console.log(oldCalc.operations(10, 5, 'add')) // 15

const newCalc = new NewCalculator()
console.log(newCalc.add(10, 5)) // 15

const adaptedCalc = new CalcAdapter()
console.log(adaptedCalc.operations(10, 5, 'add')) // 15;
