//Pattern Strategy 
позволяет легко масштабировать код добавляя стратегии и не изменяя базовую логику,
позволяет избегать сложных условных конструкций в вашем коде, при выборе конкретного алгоритма.
Задача, которую решает шаблон Стратегия, заключается в создание механизма выбора, одного алгоритма из несколько алгоритмов, которые имеют разные варианты.

class StrategyManager {
  constructor() {
    this._strategies = [];
  }
  addStrategy(strategy) {
    this._strategies = [...this._strategies, strategy];
  }
  getStrategy(name) {
    return this._strategies.find(strategy => strategy._name === name);
  }
}
class Strategy {
  constructor(name, handler) {
    this._name = name;
    this._handler = handler;
  }
  doAction() {
    this._handler();
  }
}
const strategyManager = new StrategyManager();
const strategy1 = new Strategy('strategy1', () => console.log('Strategy1'));
const strategy2 = new Strategy('strategy2', () => console.log('Strategy2'));
strategyManager.addStrategy(strategy1);
strategyManager.addStrategy(strategy2);
// Выбор первой стратегии.
const strategyA = strategyManager.getStrategy('strategy1');
strategyA.doAction();
// Выбор второй стратегии.
const strategyB = strategyManager.getStrategy('strategy2');
strategyB.doAction();
// Выбо не существующей стратегии.
const strategyC = strategyManager.getStrategy('strategy3');
try {
  strategyC.doAction();
} catch (err) {
  console.error('Caught Error');
  console.error(err);
}
